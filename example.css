/* especificidad: https://specificity.keegan.st/ 
    se sobre escribe segun su nivel de specificity
*/

body{
    background-color: #ddd;
}

/* (0, 1, 0) */
.text {
    font-size: 20px;
    color: #09f;
    font-family:system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    font-weight: bold;
}

/* (1, 0, 0) */
#text{
    color: orange;
}

/* (0, 0, 1) */
p {
    color: blueviolet;
    outline: 10px solid #09f;
}

/* saltarse la especificidad con !important */
p {
    color: blueviolet !important;
}


/* UNIDADES RELATIVAS Y ABSOLUTAS */
/* PX --> UNIDAD RELATIVA */
/* % --> UNIDAD RELATIVA DEL CONTENEDOR PADRE */
/* vh y vw --> UNIDAD RELATIVA AL VIEWPORT W Y H */

body{
    margin: 0;
}

.container {
    /* contenido: el contenido real del elemento */
    width: 150px;
    height: 150px;
    background: blanchedalmond;
    /* padding es el contorno del contenido: cambia el tamaño del contenido */
    padding: 10px;
    /* border es el borde visible que rodea al padding y al contenido: cambia el tamaño del contenido */
    border: 10px solid; 
    /* margin es el espacio externo que separa el elemento de otros elementos, NO AFECTA EL TAMAÑO DEL BLOQUE */
    margin: 20px;
    
    /* aqui el tamaño final del contenido no es l mismo que el del inicio, 
    porque hemos sumado los px del padding y los px del border.
    si necesitamos un tamaño especifico del contenido podemos usar border-box:
    hace que se el contenido total considere desde el border hacia dentro*/
    box-sizing: border-box;

    font-size: 40px;
    /*el desbordamiento se puede solucionar con overflow
    auto detecta si necesita el scroll o no y lo esconde, scroll muestra el scroll siempre,
     hidden no muestra el desbordamiento
    */
    overflow: auto; 
    text-overflow: ellipsis;
    
}

/* MODELO DE LA CAJA
+-----------------------------+
|        margin              |
|  +---------------------+   |
|  |      border         |   |
|  |  +-------------+    |   |
|  |  |  padding    |    |   |
|  |  | +--------+  |    |   |
|  |  | | content | |    |   |
|  |  | +--------+  |    |   |
|  |  +-------------+    |   |
|  +---------------------+   |
+-----------------------------+ */


/* ETIQUETAS BLOQUE Y ETIQUETAS EN LINEA */
/* span, p, a, strong, em --> display en linea: por lo tanto no es posible modificar por defecto su height ni width, se apilan en la misma linea */
/* div, section, h1 --> display en bloque: por lo tanto si puedes modificar su w y h, no se apilan hay salto de linea entre ellos*/


/* POSICIONES:
position static: por defecto xdxd
position absolute: de manera absoluta en todo el documento mueve por coordenadas el elemento
position relative: el elemento padre es la referencia absoluta del elemento que queremos mover por coordenadas
position fixed: las coordenadas no se fijan segun el documento, ni el padre. son fijas a la pantalla o viewport
position sticky: el elemento se queda pegado al contenedor y no sale de ahi, el padre es relative
*/
.parent{
    border: 5px solid;
    width: 400px;
    height: 400px;
    box-sizing: border-box;
    position: relative;
    background-color: beige;
}

.contenedor{
    background: #09f;
    width: 150px;
    height: 150px;

    position: fixed;
    right: 0;
    /*z index para controlar el apilamiento, ir de pocos numeros para saber la capa en la que estamos
    normalmente se piensa que el viewport es un 2d, pero no es asi, los elementos tienen profundidad por capas*/
    z-index: 2;

    /* position: sticky;
    right: 0px;
    top: 0px;
    margin: auto; */
    
    /* position: fixed;
    right: 0px;
    top: 0px; */

    /* position: absolute; */
    /* right: 0px;
    top: 0px;
    bottom: 0px;
    left: 0px; todo esto es equivalente al inset: 0*/
    /* inset: 0;
    margin: auto; */
}

/*z index para controlar el apilamiento
normalmente se piensa que el viewport es un 2d, pero no es asi, los elementos tienen profundidad por capas
z-index es la cercania de la capa del elemento, menor importancia mas lejania

IMPORTANTE: 
se debe utilizar el position relative en el elemento que quieres tomar como referencia relativa para saber que nivel de capa aplicar
el position relative activa el stack de apilamiento o contexto de apilamiento
*/
/* 
body{
    padding-top: 200px;
}

div{
    border: 1px solid;
    opacity: .9;
    width: 200px;
    height: 200px;
    margin-top: -100px;
    box-shadow: 0 0 5px;

    position: relative;
}

div:first-child{
    background: yellow;
    z-index: 3;
}

div:nth-child(2){
    background: #09f;
    z-index: 2;

}

div:last-child{
    background: red;
    z-index: 1;
} */

/*DISPLAY
display block: se comporta como bloques, salto de linea
display inline: se comporta como linea de texto, no tiene w ni h
display flex: se aplica al componente padre, donde los hijos seran los afectados: se comporta como bloque pero permite que se muestren en columna o fila
flex direction: direccion en la que el display muestra los elementos hijos, ROW ES EL VALOR POR DEFECTO
flex wrap: cuando hay desbordamiento no wrap ajusta el tamaño de elementos para que se mantengan en la misma linea
            wrap permite que los elementos se acomoden en diferentes lineas cuando no caben
            NO WRAP ES EL VALOR POR DEFECTO
*/

.section{
    border: 4px solid;
    box-sizing: border-box;
    width: 250px;
    height: 400px;
    display: flex;
    flex-wrap: nowrap;

    flex-direction: row; /* eje principal */
    justify-content: center; /*direccion sobre el eje principal que se mueve*/
    gap: 10px; /*distancia entre elementos*/

    align-content: center; /*en mas de una linea, modifica la alineacion en el eje cruzado, en todo el contenido*/
    align-items: center; /*modifica la alineacion en el eje cruzado, dentro de su mismo contenedor*/
    
    /* flex-direction: row; */
    /* direction: rtl; rigth to left*/
    /* writing-mode:vertical-lr; left right */
    /* flex-wrap: nowrap; */

    /*existe una manera de abreviar direction y wrap en una sola linea*/
    /* flex-flow: row wrap; */
}

.item{
    border: 1px solid;
    box-sizing: border-box;
    opacity: .9;
    width: 50px;
    height: 50px;

    /*valores por defecto*/
    /*flex-grow: 0; los elementos NO crecen*/
    /*flex-shrink: 0; los elementos pueden reducir su tamaño a un tamaño mas pequeño que su flex-basis*/
    /*flex-basis: auto; los elementos tienen un tamaño base en auto*/
    /*esto es equivalente a flex: auto*/


    /*flex-grow: 1; /*los elementos crecen su tamaño, se adaptan al contenedor padre*/
    /*flex-shrink: 1; /*los elementos pueden reducir su tamaño*/
    /*flex-basis: 0; /*independientemente del contenido todos los elementos toman el mismo tamaño*/
    /*esto es equivalente a flex: 1;*/
    /*flex: 1;*/
}

.item:first-child{
    background: yellow;
    height: 20px;
    align-self: end; /*alineacion de un solo elemento*/
    /*flex: 4;/*sirve como medida relativa para asignar el tamaño de los elementos, 4 veces lo que usaria 1 espacio normal*/
    /* order: 3; /*orden en el que los hijos se muestran en el contendor flexible, es como el z index */
}

.item:nth-child(2){
    background-color: violet;
    height: 30px;
    /* flex: 2; /*2 veces de lo que usaria un espacio normal(el espacio normal es el elemento que tiene flex:1)*/
    /*order: 1; */
}
.item:last-child{
    background: red;
    /* flex: 1; 
    order: 2; */
}

/*flex: solo un eje principal, row o column
grid: cuadricula, matriz o rejilla dos dimensiones, row Y column*/

.contenedor-grid{
    margin: 10px;

    background-color: pink;
    border: 3px solid;
    border-radius: 10px;

    /*para convertirlo a cuadricula se usa la propiedad grid*/
    display: grid;
    /*grid-template-columns: 1fr 1fr; /*1fr = 100%, la cantidad de fracciones que pongamos sera el total de columnas*/
    /*existen dos maneras de indicar el alto de la fila*/
    /*grid-template-rows: 100px 50px 20px 500px; /*tamaño de la altura de las filas especificada*/
    /*grid-auto-rows: 200px 19px;/*el tamaño de la altura automaticamente de cada fila*/

    grid-auto-flow: row; /*valor por defecto*/

    /*usar REPEAT cuando el mismo valor se repite, se puede combinar con valores fijos*/
    /*grid-template-columns: 25px repeat(3, 1fr) minmax(100px, 1fr); /*una columna de 25px, 3 de 1 fr, y la ultima columna tiene un espacio minimo de 100px y maximo se comporta como 1fr*/
    /*repeat(3, 1fr): repite 3 columnas de 1 fr*/
    /*repeat(3, 25px 50px): se repite el patron de una columna 25 y otra 50*/
    /*minmax(100px, 1fr): minimo 100px, maximo 1fr*/
    /* grid-template-rows: repeat(2, 100px);  */

    grid-template-columns: repeat(3, 100px);
    grid-auto-rows: 50px;
    gap: 4px;
    height: 400px;

    /*estas propiedades solo afectan a los elementos*/
    justify-items: stretch; /*de izq a der*/
    align-items: center; /*de arriba a abajo*/
    /*abreviacion de estos dos elementos*/
    place-items: stretch;

    /*se puede alinear tambien el contenedor*/
    justify-content: center; /*horizontalmente*/
    align-content: center; /*verticalmente*/
    /*abreviacion de estos elementos:*/
    place-content: center;

}

.div-grid{
    background: hotpink;
    border: 2px solid plum;
    border-radius: 6px;
}

/*Bento grids: https://bentogrids.com/*/
.contenedor-grid div:first-child{
    background: greenyellow;
    border: 2px solid green;
    
    /*posicionar desde donde inicia y donde termina en la cuadrila*/
    /*grid-column-start: 1; /*espacio de la cuadricula 3*/
    /*grid-column-end: 3; /*espacio de la cuadricula 4*/
    /*forma corta de hacerlo*/
    /*grid-column: 2 / 3; /*que vaya de la columna 2 a la 4*/
    
    /*grid-row-start: 1;
    grid-row-end: 3;
    /*forma corta de hacerlo*/
    /*grid-row: 2 / 4; /*que vaya de la fila 2 a la 4*/
    
    align-self: stretch; /*se puede modificar uno solo*/
}



.div-poster{
    display: grid;
    /*en vez de usar media querys*/
    grid-template-columns: repeat(
        auto-fill, /*agrega todas las columnas que quepan en el ancho disponible del contenedor*/
                   /*auto-fit: cuando los elementos no llenan toda la fila, el contenido se ajusta para que llenen los espacios vacios*/
        minmax(200px, 1fr) /*ancho minimo de 200px, pero puede crecer hasta un máximo de 1fr*/
    );
    /*forma abreviada de escribir column-gap: 10px y row-gap:10px*/
    gap: 16px 16px; /*cuando es el mismo valor se puede poner 1 sola vez, cuando es diferente el gap de arriba- abajo y der-izq se ponen ambos valores*/

    /*si se quiere limitar el tamaño maximo de los componentes que caben se puede dejar fijo el tamaño del w*/
    max-width: 800px;
    margin: 0 auto;
}

img {
    width: 100%;
    height: auto;

    border-radius: 8px;
}

/*Creando un Layout*/

.contenedor-web{
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: 35px 1fr 100px;
    min-height: 100vh;
    /*los nombres asignados se inyectan donde quieres que aparezcan*/
    grid-template-areas: 
        "header header header"
        "aside main main"
        "footer footer footer"
    ;
}

/*al hacer media querys tambien podemos ajustarlos*/
@media(width>400px){
    .contenedor-web{
        grid-template-areas: 
        "header header aside"
        "main main main"
        "footer footer footer"
    ;
    }
}

.contenedor-web header{
    background: #09f;
    /* grid-column: 1 / -1; */ /*esta bien la distribuicion de los elementos, pero a veces es muy dificil de mantener el codigo o realmente entender que esta pasando*/
    /*asignaremos un nombre a los elementos*/
    grid-area: header; /*asigna nombre*/
}

.contenedor-web aside{
    background: yellow;
    grid-area: aside; /*asigna nombre*/
}

.contenedor-web main{
    background: red;
    /* grid-column: span 2; /*span: posicion actual, cantidad de celdas que avanza */
    grid-area: main; /*asigna nombre*/
}

.contenedor-web footer{
    background: gray;
    /* grid-column: 1 / -1; */
    grid-area: footer; /*asigna nombre*/
}